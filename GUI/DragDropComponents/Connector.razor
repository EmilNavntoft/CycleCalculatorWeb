@using CycleCalculator.CycleModel.Model.IO
﻿
<path d="M @X1 @Y1 C @_c1X @_c1Y, @_c2X @_c2Y, @X2 @Y2" stroke="black" stroke-width=@_strokeWidth fill="transparent"
	  @onclick="OnClickMethod" @onclick:stopPropagation />

@code {
    [Parameter] public Direction Dir1 { get; set; }
    [Parameter] public double X1 { get; set; }
    [Parameter] public double Y1 { get; set; }

    [Parameter] public Direction Dir2 { get; set; }
    [Parameter] public double X2 { get; set; }
    [Parameter] public double Y2 { get; set; }

    private double _strokeWidth = 3;

    [Parameter]
    public DragDropPort ConnectionOne { get; set; }

    [Parameter]
    public DragDropPort ConnectionTwo { get; set; }

    [Parameter]
    public EventCallback<Connector> OnClick { get; set; }

    double _c1X;
    double _c1Y;

    double _c2X;
    double _c2Y;

    protected override void OnParametersSet()
    {
        _c1X = Cx(Dir1, X1);
        _c1Y = Cy(Dir1, Y1);

        _c2X = Cx(Dir2, X2);
        _c2Y = Cy(Dir2, Y2);

        base.OnParametersSet();
    }

    const int Coef = 70;

    static double Cx(Direction dir, double x)
        => (dir == Direction.Right || dir == Direction.Left)
            ? dir == Direction.Right ? x + Coef : x - Coef
            : x;

    static double Cy(Direction dir, double y)
        => (dir == Direction.Right || dir == Direction.Left)
            ? y
            : dir == Direction.Bottom ? y + Coef : y - Coef;

    private bool _isClicked = false;
    public void ResetIsClicked()
    {
        _isClicked = false;
        ResetStroke();
    }
    public bool IsClicked()
    {
        return _isClicked;
    }

    private void OnClickMethod()
    {
        _isClicked = true;
        EnlargeStroke();
        OnClick.InvokeAsync(this);
    }

    private void ResetStroke()
    {
        _strokeWidth = 3;
    }

    private void EnlargeStroke()
    {
        _strokeWidth = 5;
    }

    public enum Direction
    {
        Top,
        Right,
        Bottom,
        Left
    }
}