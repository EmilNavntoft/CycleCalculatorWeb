@using CycleCalculator.CycleModel.Model
@using CycleCalculator.CycleModel.Model.IO
@using CycleCalculator.CycleModel.Model.Interfaces
@using CycleCalculatorWeb.CycleModel.Model
@using CycleCalculatorWeb.GUI.SVG
@using System.ComponentModel.DataAnnotations
@using Meziantou.AspNetCore.Components
@using Microsoft.JSInterop
@using static CycleCalculatorWeb.GUI.DragDropComponents.Draggable
@inject IJSRuntime Js
@inject MouseService MouseSrv

<Draggable @ref=_draggable @bind-X=@X @bind-Y=@Y OnClick="OnClick" OnUp="OnUp">

	@if(CycleComponent is SimpleCompressor)
	{
		<Compressor />
	}
	@if (CycleComponent is Prv)
	{
		<Valve />
	}
	@if (CycleComponent is TemperatureBoundary)
	{
		<InlineBoundary />
	}
	@if (CycleComponent is HeatFlowBoundary)
	{
		<InlineBoundary />
	}
	@if (_cycleComponent is TeeSection)
	{
		<Tee />
	}
	@if (_cycleComponent is CycleCalculator.CycleModel.Model.Sensor)
	{
		<Sensor />
	}
	@if (_cycleComponent is PlateHeatExchanger)
	{
		<PHE />
	}

	@if (CycleComponent is CycleCalculator.CycleModel.Model.Sensor && CycleComponent.PortA.Temperature != EngineeringUnits.Temperature.NaN)
	{
		<svg height="65" width="200" y="-35" style="user-select: none;">
			<text x="45" y="15" fill="black">@($"T: {Math.Round(CycleComponent.PortA.Temperature.DegreeCelsius, 1)} °C")</text>
			<text x="45" y="30" fill="black">@($"h: {Math.Round(CycleComponent.PortA.Enthalpy.KilojoulePerKilogram, 1)} kJ/kg")</text>
			<text x="45" y="45" fill="black">@($"p: {Math.Round(CycleComponent.PortA.Pressure.Bar, 1)} bar")</text>
			<text x="45" y="60" fill="black">@($"m: {Math.Round(CycleComponent.PortA.MassFlow.KilogramPerSecond, 1)} kg/s")</text>
		</svg>
	}
	@if (CycleComponent is IPowerConsumer && CycleComponent.PortA.Temperature != EngineeringUnits.Temperature.NaN)
	{
		<svg height="65" width="200" y="0" style="user-select: none;">
			<text x="45" y="15" fill="black">@($"W: {Math.Round(((IPowerConsumer)CycleComponent).PowerConsumption.Kilowatt, 1)} kW")</text>
		</svg>
	}
	@if (CycleComponent is IBoundary && CycleComponent.PortA.Temperature != EngineeringUnits.Temperature.NaN)
	{
		<svg height="65" width="200" y="0" style="user-select: none;">
			<text x="45" y="15" fill="black">@($"Q: {Math.Round(((IBoundary)CycleComponent).HeatFlowExchanged.Kilowatt, 1)} kW")</text>
		</svg>
	}
</Draggable>

@if (CycleComponent is CycleCalculator.CycleModel.Model.Sensor)
{
	<DragDropPort OnPortInitialized=@(p => OnPortInitialized(p)) X=(X+75-7*Math.Cos(_angle*Math.PI/180)) Y=(Y+50-7*Math.Sin(_angle*Math.PI/180)) PortClicked="PortClicked" Parent="@this" Direction=@PortADirection PortIdentifier="@PortIdentifier.A" />
	<DragDropPort OnPortInitialized=@(p => OnPortInitialized(p)) X=(X+75+7*Math.Cos(_angle*Math.PI/180)) Y=(Y+50+7*Math.Sin(_angle*Math.PI/180)) PortClicked="PortClicked" Parent="@this" Direction=@PortBDirection PortIdentifier="@PortIdentifier.B" />
}
else if (CycleComponent is PlateHeatExchanger)
{
	<DragDropPort OnPortInitialized=@(p => OnPortInitialized(p)) X=(X+75-25*Math.Cos(_angle*Math.PI/180)+20*Math.Sin(_angle*Math.PI/180)) Y=(Y+50-25*Math.Sin(_angle*Math.PI/180)+20*Math.Cos(_angle*Math.PI/180)) PortClicked="PortClicked" Parent="@this" Direction=@PortADirection PortIdentifier="@PortIdentifier.A" />
	<DragDropPort OnPortInitialized=@(p => OnPortInitialized(p)) X=(X+75+25*Math.Cos(_angle*Math.PI/180)+20*Math.Sin(_angle*Math.PI/180)) Y=(Y+50+25*Math.Sin(_angle*Math.PI/180)+20*Math.Cos(_angle*Math.PI/180)) PortClicked="PortClicked" Parent="@this" Direction=@PortBDirection PortIdentifier="@PortIdentifier.B" />
	<DragDropPort OnPortInitialized=@(p => OnPortInitialized(p)) X=(X+75-25*Math.Cos(_angle*Math.PI/180)-20*Math.Sin(_angle*Math.PI/180)) Y=(Y+50-25*Math.Sin(_angle*Math.PI/180)-20*Math.Cos(_angle*Math.PI/180)) PortClicked="PortClicked" Parent="@this" Direction=@PortADirection PortIdentifier="@PortIdentifier.C" />
	<DragDropPort OnPortInitialized=@(p => OnPortInitialized(p)) X=(X+75+25*Math.Cos(_angle*Math.PI/180)-20*Math.Sin(_angle*Math.PI/180)) Y=(Y+50+25*Math.Sin(_angle*Math.PI/180)-20*Math.Cos(_angle*Math.PI/180)) PortClicked="PortClicked" Parent="@this" Direction=@PortBDirection PortIdentifier="@PortIdentifier.D" />
}
else
{
	<DragDropPort OnPortInitialized=@(p => OnPortInitialized(p)) X=(X+75-25*Math.Cos(_angle*Math.PI/180)) Y=(Y+50-25*Math.Sin(_angle*Math.PI/180)) PortClicked="PortClicked" Parent="@this" Direction=@PortADirection PortIdentifier="@PortIdentifier.A" />
	<DragDropPort OnPortInitialized=@(p => OnPortInitialized(p)) X=(X+75+25*Math.Cos(_angle*Math.PI/180)) Y=(Y+50+25*Math.Sin(_angle*Math.PI/180)) PortClicked="PortClicked" Parent="@this" Direction=@PortBDirection PortIdentifier="@PortIdentifier.B" />
}

@if (_nPorts == 3)
{
	<DragDropPort OnPortInitialized=@(p => OnPortInitialized(p)) X=(X+75-25*Math.Sin(_angle*Math.PI/180)) Y=(Y+50+25*Math.Cos(_angle*Math.PI/180)) PortClicked="PortClicked" Parent="@this" Direction=@PortCDirection PortIdentifier="@PortIdentifier.C" />
}

@if (_showPropertyWindow)
{
	<foreignObject x=@(X+90) y=@(Y+75) width="270" height="300" style="position:absolute; z-index: 10;" @onmousedown:stopPropagation>
		<div xmlns="http://www.w3.org/1999/xhtml" style="border: 1px solid black; background-color: white; opacity: 1;">
			<EditForm Model=_cycleComponent OnSubmit="() => {_showPropertyWindow = false;}">
				<DataAnnotationsValidator />
				<ValidationSummary />
				@if (_cycleComponent is SimpleCompressor)
				{
					<GenericForm Model=(SimpleCompressor)_cycleComponent />
				}
				@if (_cycleComponent is Prv)
				{
					<GenericForm Model=(Prv)_cycleComponent />
				}
				@if (_cycleComponent is TemperatureBoundary)
				{
					<GenericForm Model=(TemperatureBoundary)_cycleComponent />
				}
				@if (_cycleComponent is HeatFlowBoundary)
				{
					<GenericForm Model=(HeatFlowBoundary)_cycleComponent />
				}
				@if (_cycleComponent is TeeSection)
				{
					<GenericForm Model=(TeeSection)_cycleComponent />
				}
				@if (_cycleComponent is PlateHeatExchanger)
				{
					<GenericForm Model=(PlateHeatExchanger)_cycleComponent />
				}
				<button type="submit">OK</button>
			</EditForm>
		</div>
	</foreignObject>
}
@code {
	private Draggable _draggable = new Draggable();

	private double _angle = 0;

	public List<DragDropPort> Ports = new();

	[Parameter]
	public double X { get; set; }
	[Parameter]
	public double Y { get; set; }

	[Parameter]
	public double InitialX { get; set; } = 200;
	[Parameter]
	public double InitialY { get; set; } = 200;

	[Parameter]
	public EventCallback<DragDropPort> OnClickPortA { get; set; }
	[Parameter]
	public EventCallback<DragDropPort> OnClickPortB { get; set; }
	[Parameter]
	public EventCallback<DragDropPort> OnClickPortC { get; set; }
	[Parameter]
	public EventCallback<DragDrop> OnDragDropClick { get; set; }
	[Parameter]
	public EventCallback<DragDrop> OnDragDropUp { get; set; }
	[Parameter]
	public EventCallback<DragDrop> OnDragDropInitialized { get; set; }

	private CycleComponent _cycleComponent;
	[Parameter]
	public CycleComponent CycleComponent { 
		get
		{
			return _cycleComponent;
		} 
		set
		{
			_cycleComponent = value;
			if (_cycleComponent is TeeSection)
			{
				_nPorts = 3;
			}
			else
			{
				_nPorts = 2;
			}
		}
	}

	[Parameter]
	public string Name { get; set; }

	private int _nPorts;
	private Connector.Direction PortADirection { get; set; } = Connector.Direction.Left;
	private Connector.Direction PortBDirection { get; set; } = Connector.Direction.Right;
	private Connector.Direction PortCDirection { get; set; } = Connector.Direction.Bottom;

	private void OnPortInitialized(DragDropPort port)
	{
		Ports.Add(port);
		if (Ports.Count == _nPorts)
		{
			OnDragDropInitialized.InvokeAsync(this);
		}
	}

	private async void PortClicked(DragDropPort port)
	{
		await OnClickPortA.InvokeAsync(port);
	}

	bool _showPropertyWindow = false;
	private void OnClick(MouseEventArgs e)
	{
		if (e.Button == (long)0)
		{
			OnDragDropClick.InvokeAsync(this);
		}
		if (e.Button == (long)2)
		{
			OnDragDropClick.InvokeAsync(this);
			_showPropertyWindow = !_showPropertyWindow;
		}
	}

	private void OnUp()
	{
		OnDragDropUp.InvokeAsync(this);
	}

	public void Rotate()
	{
		if (_angle + 90 < 360)
		{
			_angle += 90;
		}
		else
		{
			_angle = 0;
		}

		PortADirection = RotateDirection(PortADirection);
		PortBDirection = RotateDirection(PortBDirection);
		PortCDirection = RotateDirection(PortCDirection);

		_draggable.Rotate();
	}

	private Connector.Direction RotateDirection(Connector.Direction dir)
	{
		if (dir == Connector.Direction.Left) return Connector.Direction.Top;
		else if (dir == Connector.Direction.Top) return Connector.Direction.Right;
		else if (dir == Connector.Direction.Right) return Connector.Direction.Bottom;
		else return Connector.Direction.Left;
	}
}
