@using CycleCalculatorWeb.GUI.Services
@inject IMouseService MouseSrv
 
<g transform="translate(@_x, @_y) rotate(@_rotation 75 50)" @onclick=OnClick @onclick:stopPropagation @oncontextmenu=OnClick @oncontextmenu:preventDefault="true" @onmousedown=OnDown
@onmousedown:stopPropagation="true">
    @ChildContent
</g>

@code {
    [Parameter] 
    public RenderFragment? ChildContent { get; set; }

    private double _rotation = 0;

    double? _x;
    [Parameter]
    public double X { 
        get { return _x ?? 0; }
        set { if (!_x.HasValue || (!IsDown & XChanged.HasDelegate)) 
            { 
                _x = value; 
            } 
        } 
    }
    [Parameter] 
    public EventCallback<double> XChanged { get; set; }

    double? _y;
    [Parameter]
    public double Y {
        get { return _y ?? 0; }
        set { if (!_y.HasValue || (!IsDown & YChanged.HasDelegate)) { _y = value; } }
    }
    [Parameter] 
    public EventCallback<double> YChanged { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnClick { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnUp { get; set; }


    protected override void OnInitialized() {
        MouseSrv.OnMove += OnMove;
        MouseSrv.OnUp += OnUpLeave;
        MouseSrv.OnLeave += OnUpLeave;
        base.OnInitialized();
    }

    bool _isDown;
    bool IsDown {
        get { return _isDown; }
        set {
            _isDown = value;
        }
    }

    double _cursorX;
    double _cursorY;
    void OnDown(MouseEventArgs e) {
        IsDown = true;
        _cursorX = e.ClientX;
        _cursorY = e.ClientY;
    }

    void OnUpLeave(object? _, MouseEventArgs e)
    {
        IsDown = false;
        OnUp.InvokeAsync(e);
    }

    void OnMove(object? _, MouseEventArgs e) {
        if (!IsDown)
            return;

        _x = _x - (_cursorX - e.ClientX);
        _y = _y - (_cursorY - e.ClientY);

        _cursorX = e.ClientX;
        _cursorY = e.ClientY;

        XChanged.InvokeAsync(_x.Value);
        YChanged.InvokeAsync(_y.Value);
    }

    public void Dispose() {
        MouseSrv.OnMove -= OnMove;
        MouseSrv.OnUp -= OnUpLeave;
        MouseSrv.OnLeave -= OnUpLeave;
    }

    public void Rotate()
    {
        _rotation += 90;
    }
}