@page "/"
@using CycleCalculator.CycleModel.Model
@using CycleCalculator.CycleModel.Model.Enums
@using CycleCalculator.CycleModel.Solver
@using CycleCalculatorWeb.CoolpropJsInterop
@using CycleCalculatorWeb.CycleModel.Model
@using CycleCalculatorWeb.Utils
@using EngineeringUnits
@using CycleCalculatorWeb.GUI.DragDropComponents
@using CycleCalculatorWeb.GUI.SaveFileIO
@using System.Text.Json
@using System.Text
@using SharpFluids
@using static CycleCalculatorWeb.GUI.DragDropComponents.Draggable
﻿@using static CycleCalculatorWeb.GUI.DragDropComponents.Connector
@inject MouseService MouseSrv
@inject IJSRuntime JS


<div>
	<CycleCalculatorWeb.GUI.Layout.SideBar OnAddComponentClicked=AddComponent />
</div>

<svg class="dropWindow" height="3840" width="2160" tabindex="0"
     @onmousemove="@(e => MouseSrv.FireMove(this, e))"
     @onmouseup="@(e => MouseSrv.FireUp(this, e))"
     @onmouseleave="@(e => MouseSrv.FireLeave(this, e))"
     @onclick="OnBackgroundClick"
     @onkeydown="OnKeyDown">
	


	@foreach (var connector in _connectors)
	{
		<Connector @key="connector" X1=@(connector.ConnectionOne.X)
		           Y1=@(connector.ConnectionOne.Y)
		           Dir1=@connector.ConnectionOne.Direction
		           X2=@(connector.ConnectionTwo.X)
		           Y2=@(connector.ConnectionTwo.Y)
		           Dir2=@connector.ConnectionTwo.Direction
		           OnClick="@(c => ConnectorClicked(c, connector))"/>
	}

	@foreach (var dragDrop in _dragDrops)
	{
		<DragDrop @key=@dragDrop Name=@dragDrop.Name InitialX=@dragDrop.X InitialY=@dragDrop.Y OnDragDropInitialized="@(d => DragDropInitialized(d, dragDrop))" OnDragDropUp="@(d => DragDropUp(d, dragDrop))" OnDragDropClick="@(d => DragDropClicked(d, dragDrop))" OnClickPortA="@(port => PortClicked(port))" OnClickPortB="@(port => PortClicked(port))" OnClickPortC="@(port => PortClicked(port))" CycleComponent=dragDrop.CycleComponent/>
	}
</svg>
<button class="btn btn-primary" id="runButton" @onclick="RunCalculation">Run</button>
<button class="btn btn-primary" id="saveButton" @onclick="Save">Save</button>
<p class="uploadButton">
	<label>
		Upload a save file:
		<InputFile OnChange="@LoadSaveFileData"/>
	</label>
</p>

@code {
	private List<DragDrop> _dragDrops = new List<DragDrop>();
	private List<Connector> _connectors = new List<Connector>();
	private IJSInProcessObjectReference? _coolpropJs;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			var jsInProcess = (IJSInProcessRuntime)JS;
			_coolpropJs = await JS.InvokeAsync<IJSInProcessObjectReference>("import", "./js/functions.js");
			JsLogger.JsRuntime = JS;
		}
	}

	public async Task Save()
	{
		//AddPhe();
		
		SaveFile saveFile = new();
		foreach (var dragDrop in _dragDrops)
		{
			DragDropSaveFileDao dao = DragDropSaveFileDao.Build(dragDrop);
			saveFile.DragDropDaos.Add(dao);
		}

		foreach (var connector in _connectors)
		{
			ConnectorSaveFileDao dao = ConnectorSaveFileDao.Build(connector);
			saveFile.ConnectorDaos.Add(dao); 
		}
		var text = saveFile.Serialize();
		var bytes = Encoding.UTF8.GetBytes(text);
		var fileStream = new MemoryStream(bytes);
		using var streamRef = new DotNetStreamReference(stream: fileStream);

		await JS.InvokeVoidAsync("saveAsFile", "savefile.json", streamRef);
	}

	SaveFile? _loadedSaveFile;
	public async void LoadSaveFileData(InputFileChangeEventArgs e)
	{
		_connectors.Clear();
		_dragDrops.Clear();
		MemoryStream ms = new MemoryStream();
		await e.File.OpenReadStream().CopyToAsync(ms);
		var bytes = ms.ToArray();
		
		string result = System.Text.Encoding.UTF8.GetString(bytes);
		
		_loadedSaveFile = SaveFile.Deserialize(result);
		
		if (_loadedSaveFile != null)
		{
			BuildLoadedSaveFileDragDrops();
		}
	}


	private void BuildLoadedSaveFileDragDrops()
	{
		if (_loadedSaveFile == null)
		{
			return;
		}
		foreach (var dragDropDao in _loadedSaveFile.DragDropDaos)
		{
			DragDrop dragDrop = new();
			dragDrop.Name = dragDropDao.Name;
			dragDrop.InitialX = dragDropDao.X;
			dragDrop.InitialY = dragDropDao.Y;

			Type type = Type.GetType(dragDropDao.CycleComponentTypeString);
			var component = Activator.CreateInstance(type, new object[] { dragDropDao.Name, _coolpropJs });

			foreach (var propertyValuePair in dragDropDao.CycleComponentPropertyData)
			{
				var propertyInfo = type.GetProperty(propertyValuePair.Key);
				if (propertyInfo.PropertyType.IsEnum)
				{
					Type enumType = propertyInfo.PropertyType;
					object value = Enum.ToObject(enumType, propertyValuePair.Value);
					
					propertyInfo.SetValue(component, value);
				}
				else
				{
					propertyInfo.SetValue(component, propertyValuePair.Value);
				}
			}

			dragDrop.CycleComponent = (CycleComponent)component;
			_dragDrops.Add(dragDrop);
			LayoutBuilder.AddComponent((CycleComponent)component);
		}
	}

	private void BuildLoadedSaveFileConnectors()
	{
		if (_loadedSaveFile == null)
		{
			return;
		}
		foreach (var connectorDao in _loadedSaveFile.ConnectorDaos)
		{
			Connector connector = new();
			CycleComponent componentOne = _dragDrops.First(d => d.Name == connectorDao.ComponentOneName).CycleComponent;
			CycleComponent componentTwo = _dragDrops.First(d => d.Name == connectorDao.ComponentTwoName).CycleComponent;

			connector.ConnectionOne = _dragDrops.First(d => d.Name == connectorDao.ComponentOneName).Ports.First(p => p.PortIdentifier == connectorDao.PortOneIdentifier);
			connector.ConnectionTwo = _dragDrops.First(d => d.Name == connectorDao.ComponentTwoName).Ports.First(p => p.PortIdentifier == connectorDao.PortTwoIdentifier);
			_connectors.Add(connector);
			LayoutBuilder.AddConnection(componentOne, componentTwo, connectorDao.PortOneIdentifier, connectorDao.PortTwoIdentifier);
		}
		_loadedSaveFile = null;
	}

	private async Task RunCalculation()
	{
		await SetWaitCursor(true);
		Solver.Reset();
		Solver.Solve();
		await SetWaitCursor(false);
	}
	
	private async Task SetWaitCursor(bool isWaiting)
	{
		if (isWaiting)
			await JS.InvokeVoidAsync("eval", "document.body.style.cursor = 'wait'");
		else
			await JS.InvokeVoidAsync("eval", "document.body.style.cursor = 'default'");
	}

	private void AddComponent(CycleComponentType type)
	{
		switch(type)
		{
			case CycleComponentType.Compressor:
				AddComp();
				break;
			case CycleComponentType.Valve:
				AddPrv();
				break;
			case CycleComponentType.TemperatureBoundary:
				AddTb();
				break;
			case CycleComponentType.HeatFlowBoundary:
				AddTb();
				break;
			case CycleComponentType.TeeSection:
				AddTee();
				break;
			case CycleComponentType.Sensor:
				AddSensor();
				break;
			case CycleComponentType.HeatExchanger:
				AddHeatExchanger();
				break;
			default:
				break;
		}
	}

	private int _nComp = 1;
	private void AddComp()
	{
		DragDrop dragDrop = new DragDrop();
		dragDrop.Name = $"Comp{_nComp}";
		_nComp++;
		SimpleCompressor compressor = new SimpleCompressor(dragDrop.Name, _coolpropJs);
		dragDrop.CycleComponent = compressor;
		LayoutBuilder.AddComponent(compressor);
		_dragDrops.Add(dragDrop);
	}

	private int _nPrv = 1;
	private void AddPrv()
	{
		DragDrop dragDrop = new DragDrop();
		dragDrop.Name = $"PRV{_nPrv}";
		_nPrv++;
		_dragDrops.Add(dragDrop);
		Prv prv = new Prv(dragDrop.Name, _coolpropJs);
		dragDrop.CycleComponent = prv;
		LayoutBuilder.AddComponent(prv);
	}

	private int _nTb = 1;
	private void AddTb()
	{
		DragDrop dragDrop = new DragDrop();
		dragDrop.Name = $"TB{_nTb}";
		_nTb++;
		_dragDrops.Add(dragDrop);
		TemperatureBoundary tb = new TemperatureBoundary(dragDrop.Name, _coolpropJs);
		dragDrop.CycleComponent = tb;
		LayoutBuilder.AddComponent(tb);
	}

	private int _nHfb = 1;
	private void AddHfb()
	{
		DragDrop dragDrop = new DragDrop();
		dragDrop.Name = $"HFB{_nHfb}";
		_nHfb++;
		_dragDrops.Add(dragDrop);
		HeatFlowBoundary hfb = new HeatFlowBoundary(dragDrop.Name, _coolpropJs);
		dragDrop.CycleComponent = hfb;
		LayoutBuilder.AddComponent(hfb);
	}

	private int _nPhe = 1;
	private void AddPhe()
	{
		DragDrop dragDrop = new DragDrop();
		dragDrop.Name = $"PHE{_nPhe}";
		_nPhe++;
		_dragDrops.Add(dragDrop);
		PlateHeatExchanger phe = new PlateHeatExchanger(dragDrop.Name, _coolpropJs);
		dragDrop.CycleComponent = phe;
		LayoutBuilder.AddComponent(phe);
	}

	private int _nTee = 1;
	private void AddTee()
	{
		DragDrop dragDrop = new DragDrop();
		dragDrop.Name = $"TEE{_nTb}";
		_nTee++;
		_dragDrops.Add(dragDrop);
		TeeSection tee = new TeeSection(dragDrop.Name, _coolpropJs);
		dragDrop.CycleComponent = tee;
		LayoutBuilder.AddComponent(tee);
	}

	private int _nSensor = 1;
	private void AddSensor()
	{
		DragDrop dragDrop = new DragDrop();
		dragDrop.Name = $"Sensor{_nSensor}";
		_nSensor++;
		_dragDrops.Add(dragDrop);
		Sensor sensor = new Sensor(dragDrop.Name, _coolpropJs);
		dragDrop.CycleComponent = sensor;
		LayoutBuilder.AddComponent(sensor);
	}
	
	private int _nHex = 1;
	private void AddHeatExchanger()
	{
		DragDrop dragDrop = new DragDrop();
		dragDrop.Name = $"HeatExchanger{_nHex}";
		_nHex++;
		_dragDrops.Add(dragDrop);
		PlateHeatExchanger plateHeatExchanger = new PlateHeatExchanger(dragDrop.Name, _coolpropJs);
		dragDrop.CycleComponent = plateHeatExchanger;
		LayoutBuilder.AddComponent(plateHeatExchanger);
	}

	private void DragDropInitialized(DragDrop dragDropDisplayed, DragDrop dragDropData)
	{
		dragDropDisplayed.X = dragDropData.InitialX;
		dragDropDisplayed.Y = dragDropData.InitialY;

		dragDropData.Ports = dragDropDisplayed.Ports;

		if (dragDropData == _dragDrops.Last() && _loadedSaveFile != null)
		{
			BuildLoadedSaveFileConnectors();
		}
	}

	private void OnBackgroundClick()
	{
		if (_clickedPort != null)
		{
			_clickedPort.ResetIsClicked();
		}
		_clickedPort = null;

		if (_clickedConnectorDisplayed != null)
		{
			_clickedConnectorDisplayed.ResetIsClicked();
			_clickedConnectorDisplayed = null;
		}
		_clickedConnectorData = null;

		if (_clickedDragDropDisplayed != null)
		{
			_clickedDragDropDisplayed = null;
		}
		_clickedDragDropData = null;
	}

	DragDropPort? _clickedPort;
	private void PortClicked(DragDropPort port)
	{
		bool portAlreadyConnected = _connectors.Any(c => c.ConnectionOne == port || c.ConnectionTwo == port);
		if (portAlreadyConnected)
		{
			if (_clickedPort != null)
			{
				_clickedPort.ResetIsClicked();
			}
			_clickedPort = null;
			port.ResetIsClicked();
			return;
		}
		if (_clickedPort == null)
		{
			_clickedPort = port;
		}
		else
		{
			bool clickedPortIsPort = _clickedPort == port;
			bool clickedPortParentIsPortParent = _clickedPort.Parent == port.Parent;
			bool clickedPortAlreadyConnected = _connectors.Any(c => c.ConnectionOne == _clickedPort || c.ConnectionTwo == _clickedPort);

			if (clickedPortIsPort || clickedPortParentIsPortParent || clickedPortAlreadyConnected)
			{
				_clickedPort.ResetIsClicked();
				port.ResetIsClicked();
				_clickedPort = null;
				return;
			}

			Connector newConnector = new Connector()
				{
					Dir1 = _clickedPort.Direction,
					ConnectionOne = _clickedPort,
					Dir2 = port.Direction,
					ConnectionTwo = port
				};

			_connectors.Add(newConnector);
			LayoutBuilder.AddConnection(_clickedPort.Parent.CycleComponent, port.Parent.CycleComponent, _clickedPort.PortIdentifier, port.PortIdentifier);

			_clickedPort.ResetIsClicked();
			port.ResetIsClicked();
			_clickedPort = null;
			RunCalculation();
		}
	}

	Connector? _clickedConnectorDisplayed;
	Connector? _clickedConnectorData;
	private void ConnectorClicked(Connector connectorDisplayed, Connector connectorData)
	{
		_clickedDragDropDisplayed = null;
		_clickedDragDropData = null;
		_clickedConnectorDisplayed = connectorDisplayed;
		_clickedConnectorData = connectorData;
	}

	DragDrop? _clickedDragDropDisplayed;
	DragDrop? _clickedDragDropData;
	private void DragDropClicked(DragDrop dragDropDisplayed, DragDrop dragDropData) 
	{ 
		if (_clickedConnectorDisplayed != null)
		{
			_clickedConnectorDisplayed.ResetIsClicked();
		}
		_clickedConnectorDisplayed = null;
		_clickedConnectorData = null;
		_dragDrops.Remove(dragDropData);
		_dragDrops.Add(dragDropData);
		_clickedDragDropDisplayed = dragDropDisplayed;
		_clickedDragDropData = dragDropData;
	}

	private void DragDropUp(DragDrop dragDropDisplayed, DragDrop dragDropData)
	{
		dragDropData.X = dragDropDisplayed.X;
		dragDropData.Y = dragDropDisplayed.Y;
	}

	private void OnKeyDown(KeyboardEventArgs e)
	{
		if (e.Key == "Delete")
		{
			DeleteSelectedElement();
		}
		if (e.Key == "r")
		{
			if (_clickedDragDropDisplayed != null && _clickedDragDropData != null)
			{
				_clickedDragDropDisplayed.Rotate();
			}
		}
	}

	private void DeleteSelectedElement()
	{
		if (_clickedConnectorData != null)
		{
			_connectors.Remove(_clickedConnectorData);
			LayoutBuilder.RemoveConnection(_clickedConnectorData.ConnectionOne.Parent.CycleComponent,
				_clickedConnectorData.ConnectionTwo.Parent.CycleComponent,
				_clickedConnectorData.ConnectionOne.PortIdentifier,
				_clickedConnectorData.ConnectionTwo.PortIdentifier);

			_clickedConnectorData = null;
			_clickedConnectorDisplayed = null;
			Solver.Reset();
		}
		if (_clickedDragDropData != null)
		{
			var connectedConnectors = _connectors.FindAll(c => c.ConnectionOne.Parent.Name == _clickedDragDropData.Name);
			connectedConnectors = connectedConnectors.Concat(
				_connectors.FindAll(c => c.ConnectionTwo.Parent.Name == _clickedDragDropData.Name)).ToList();
			foreach (var item in connectedConnectors)
			{
				_connectors.Remove(item);
				LayoutBuilder.RemoveConnection(item.ConnectionOne.Parent.CycleComponent,
				item.ConnectionTwo.Parent.CycleComponent,
				item.ConnectionOne.PortIdentifier,
				item.ConnectionTwo.PortIdentifier);
			}
			LayoutBuilder.RemoveComponent(_clickedDragDropData.CycleComponent);
			_dragDrops.Remove(_clickedDragDropData);
			Solver.Reset();
		}
	}
}
