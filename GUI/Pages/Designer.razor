@page "/"
@using CycleCalculator.CycleModel.Model
@using CycleCalculator.CycleModel.Model.Enums
@using CycleCalculator.CycleModel.Solver
@using CycleCalculatorWeb.CoolpropJsInterop
@using CycleCalculatorWeb.Utils
@using EngineeringUnits
@using CycleCalculatorWeb.GUI.DragDropComponents
@using CycleCalculatorWeb.GUI.SaveFileIO
@using System.Text.Json
@using System.Text
@using SharpFluids
@using static CycleCalculatorWeb.GUI.DragDropComponents.Draggable
﻿@using static CycleCalculatorWeb.GUI.DragDropComponents.Connector
@inject MouseService mouseSrv
@inject IJSRuntime JS


<div>
	<CycleCalculatorWeb.GUI.Layout.SideBar OnAddComponentClicked=AddComponent />
</div>

<svg class="dropWindow" height="3840" width="2160" tabindex="0"
	 @onmousemove="@(e => mouseSrv.FireMove(this, e))"
	 @onmouseup="@(e => mouseSrv.FireUp(this, e))"
	 @onmouseleave="@(e => mouseSrv.FireLeave(this, e))"
	 @onclick="OnBackgroundClick"
	 @onkeydown="OnKeyDown">

	@foreach (var connector in Connectors)
	{
		<Connector @key="connector" X1=@(connector.ConnectionOne.X)
				   Y1=@(connector.ConnectionOne.Y)
				   Dir1=@connector.ConnectionOne.Direction
				   X2=@(connector.ConnectionTwo.X)
				   Y2=@(connector.ConnectionTwo.Y)
				   Dir2=@connector.ConnectionTwo.Direction
				   OnClick="@(c => ConnectorClicked(c, connector))" />
	}

	@foreach (var dragDrop in DragDrops)
	{
		<DragDrop @key=@dragDrop Name=@dragDrop.Name InitialX=@dragDrop.X InitialY=@dragDrop.Y OnDragDropInitialized="@(d => DragDropInitialized(d, dragDrop))" OnDragDropUp="@(d => DragDropUp(d, dragDrop))" OnDragDropClick="@(d => DragDropClicked(d, dragDrop))" OnClickPortA="@(port => PortClicked(port))" OnClickPortB="@(port => PortClicked(port))" OnClickPortC="@(port => PortClicked(port))" CycleComponent=dragDrop.CycleComponent />
	}
</svg>
<button class="btn btn-primary" id="runButton" @onclick="RunCalculation">Run</button>
<button class="btn btn-primary" id="saveButton" @onclick="Save">Save</button>
<button class="btn btn-primary" id="loadButton" @onclick="LoadSaveFileData">Load</button>

@code {
	private List<DragDrop> DragDrops = new List<DragDrop>();
	private List<Connector> Connectors = new List<Connector>();
	private IJSInProcessObjectReference? coolpropJs;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			var jsInProcess = (IJSInProcessRuntime)JS;
			coolpropJs = await JS.InvokeAsync<IJSInProcessObjectReference>("import", "./js/functions.js");
			JsLogger.JsRuntime = JS;
		}
	}

	public async void Save()
	{
		CoolpropJsFluid f = new(coolpropJs);
		f.UpdatePH(Pressure.FromBar(50), Enthalpy.FromKilojoulePerKilogram(500));
		// SaveFile saveFile = new();
		// foreach (var dragDrop in DragDrops)
		// {
		// 	DragDropSaveFileDao dao = DragDropSaveFileDao.Build(dragDrop);
		// 	saveFile.DragDropDaos.Add(dao);
		// }

		// foreach (var connector in Connectors)
		// {
		// 	ConnectorSaveFileDao dao = ConnectorSaveFileDao.Build(connector);
		// 	saveFile.ConnectorDaos.Add(dao); 
		// }
		// var text = saveFile.Serialize();
		// var bytes = System.Text.Encoding.UTF8.GetBytes(text);
		// await FileUtil.SaveAs(js, "CycleCalculatorSave.json", bytes);
	}

	SaveFile? _LoadedSaveFile;
	public async void LoadSaveFileData()
	{
		_LoadedSaveFile = await SaveFile.OpenLoadDialog();
		if (_LoadedSaveFile != null)
		{
			BuildLoadedSaveFileDragDrops();
		}
	}


	private void BuildLoadedSaveFileDragDrops()
	{
		if (_LoadedSaveFile == null)
		{
			return;
		}
		foreach (var dragDropDao in _LoadedSaveFile.DragDropDaos)
		{
			DragDrop dragDrop = new();
			dragDrop.Name = dragDropDao.Name;
			dragDrop.InitialX = dragDropDao.X;
			dragDrop.InitialY = dragDropDao.Y;

			var type = Type.GetType(dragDropDao.CycleComponentTypeString);
			var component = Activator.CreateInstance(type, new object[] { dragDropDao.Name });

			foreach (var propertyValuePair in dragDropDao.CycleComponentPropertyData)
			{
				var propertyInfo = type.GetProperty(propertyValuePair.Key);
				if (propertyValuePair.Key == "FluidType")
				{
					propertyInfo.SetValue(component, (FluidList)(int)(Int64)propertyValuePair.Value);
				}
				else
				{
					propertyInfo.SetValue(component, propertyValuePair.Value);
				}
			}

			dragDrop.CycleComponent = (CycleComponent)component;
			DragDrops.Add(dragDrop);
			LayoutBuilder.AddComponent((CycleComponent)component);
		}
	}

	private void BuildLoadedSaveFileConnectors()
	{
		if (_LoadedSaveFile == null)
		{
			return;
		}
		foreach (var connectorDao in _LoadedSaveFile.ConnectorDaos)
		{
			Connector connector = new();
			CycleComponent componentOne = DragDrops.First(d => d.Name == connectorDao.ComponentOneName).CycleComponent;
			CycleComponent componentTwo = DragDrops.First(d => d.Name == connectorDao.ComponentTwoName).CycleComponent;

			connector.ConnectionOne = DragDrops.First(d => d.Name == connectorDao.ComponentOneName).Ports.First(p => p.PortIdentifier == connectorDao.PortOneIdentifier);
			connector.ConnectionTwo = DragDrops.First(d => d.Name == connectorDao.ComponentTwoName).Ports.First(p => p.PortIdentifier == connectorDao.PortTwoIdentifier);
			Connectors.Add(connector);
			LayoutBuilder.AddConnection(componentOne, componentTwo, connectorDao.PortOneIdentifier, connectorDao.PortTwoIdentifier);
		}
		_LoadedSaveFile = null;
	}

	private void RunCalculation()
	{
		Solver.Reset();
		Solver.Solve();
	}

	private void AddComponent(CycleComponentType type)
	{
		switch(type)
		{
			case CycleComponentType.Compressor:
				AddComp();
				break;
			case CycleComponentType.Valve:
				AddPRV();
				break;
			case CycleComponentType.TemperatureBoundary:
				AddTb();
				break;
			case CycleComponentType.TeeSection:
				AddTee();
				break;
			case CycleComponentType.Sensor:
				AddSensor();
				break;
			default:
				break;
		}
	}

	private int nComp = 1;
	private void AddComp()
	{
		DragDrop dragDrop = new DragDrop();
		dragDrop.Name = $"Comp{nComp}";
		nComp++;
		SimpleCompressor compressor = new SimpleCompressor(dragDrop.Name, coolpropJs);
		dragDrop.CycleComponent = compressor;
		LayoutBuilder.AddComponent(compressor);
		DragDrops.Add(dragDrop);
	}

	private int nPRV = 1;
	private void AddPRV()
	{
		DragDrop dragDrop = new DragDrop();
		dragDrop.Name = $"PRV{nPRV}";
		nPRV++;
		DragDrops.Add(dragDrop);
		PRV prv = new PRV(dragDrop.Name, coolpropJs);
		dragDrop.CycleComponent = prv;
		LayoutBuilder.AddComponent(prv);
	}

	private int nTb = 1;
	private void AddTb()
	{
		DragDrop dragDrop = new DragDrop();
		dragDrop.Name = $"TB{nTb}";
		nTb++;
		DragDrops.Add(dragDrop);
		TemperatureBoundary tb = new TemperatureBoundary(dragDrop.Name, coolpropJs);
		dragDrop.CycleComponent = tb;
		LayoutBuilder.AddComponent(tb);
	}

	private int nTee = 1;
	private void AddTee()
	{
		DragDrop dragDrop = new DragDrop();
		dragDrop.Name = $"TEE{nTb}";
		nTee++;
		DragDrops.Add(dragDrop);
		TeeSection tee = new TeeSection(dragDrop.Name, coolpropJs);
		dragDrop.CycleComponent = tee;
		LayoutBuilder.AddComponent(tee);
	}

	private int nSensor = 1;
	private void AddSensor()
	{
		DragDrop dragDrop = new DragDrop();
		dragDrop.Name = $"Sensor{nSensor}";
		nSensor++;
		DragDrops.Add(dragDrop);
		Sensor sensor = new Sensor(dragDrop.Name, coolpropJs);
		dragDrop.CycleComponent = sensor;
		LayoutBuilder.AddComponent(sensor);
	}

	private void DragDropInitialized(DragDrop dragDropDisplayed, DragDrop dragDropData)
	{
		dragDropDisplayed.X = dragDropData.InitialX;
		dragDropDisplayed.Y = dragDropData.InitialY;

		dragDropData.Ports = dragDropDisplayed.Ports;

		if (dragDropData == DragDrops.Last() && _LoadedSaveFile != null)
		{
			BuildLoadedSaveFileConnectors();
		}
	}

	private void OnBackgroundClick()
	{
		if (clickedPort != null)
		{
			clickedPort.ResetIsClicked();
		}
		clickedPort = null;

		if (clickedConnectorDisplayed != null)
		{
			clickedConnectorDisplayed.ResetIsClicked();
			clickedConnectorDisplayed = null;
		}
		clickedConnectorData = null;

		if (clickedDragDropDisplayed != null)
		{
			clickedDragDropDisplayed = null;
		}
		clickedDragDropData = null;
	}

	DragDropPort? clickedPort;
	private void PortClicked(DragDropPort port)
	{
		bool portAlreadyConnected = Connectors.Any(c => c.ConnectionOne == port || c.ConnectionTwo == port);
		if (portAlreadyConnected)
		{
			if (clickedPort != null)
			{
				clickedPort.ResetIsClicked();
			}
			clickedPort = null;
			port.ResetIsClicked();
			return;
		}
		if (clickedPort == null)
		{
			clickedPort = port;
		}
		else
		{
			bool clickedPortIsPort = clickedPort == port;
			bool clickedPortParentIsPortParent = clickedPort.Parent == port.Parent;
			bool clickedPortAlreadyConnected = Connectors.Any(c => c.ConnectionOne == clickedPort || c.ConnectionTwo == clickedPort);

			if (clickedPortIsPort || clickedPortParentIsPortParent || clickedPortAlreadyConnected)
			{
				clickedPort.ResetIsClicked();
				port.ResetIsClicked();
				clickedPort = null;
				return;
			}

			Connector newConnector = new Connector()
				{
					Dir1 = clickedPort.Direction,
					ConnectionOne = clickedPort,
					Dir2 = port.Direction,
					ConnectionTwo = port
				};

			Connectors.Add(newConnector);
			LayoutBuilder.AddConnection(clickedPort.Parent.CycleComponent, port.Parent.CycleComponent, clickedPort.PortIdentifier, port.PortIdentifier);

			clickedPort.ResetIsClicked();
			port.ResetIsClicked();
			clickedPort = null;
			RunCalculation();
		}
	}

	Connector? clickedConnectorDisplayed;
	Connector? clickedConnectorData;
	private void ConnectorClicked(Connector connectorDisplayed, Connector connectorData)
	{
		clickedDragDropDisplayed = null;
		clickedDragDropData = null;
		clickedConnectorDisplayed = connectorDisplayed;
		clickedConnectorData = connectorData;
	}

	DragDrop? clickedDragDropDisplayed;
	DragDrop? clickedDragDropData;
	private void DragDropClicked(DragDrop dragDropDisplayed, DragDrop dragDropData) 
	{ 
		if (clickedConnectorDisplayed != null)
		{
			clickedConnectorDisplayed.ResetIsClicked();
		}
		clickedConnectorDisplayed = null;
		clickedConnectorData = null;
		DragDrops.Remove(dragDropData);
		DragDrops.Add(dragDropData);
		clickedDragDropDisplayed = dragDropDisplayed;
		clickedDragDropData = dragDropData;
	}

	private void DragDropUp(DragDrop dragDropDisplayed, DragDrop dragDropData)
	{
		dragDropData.X = dragDropDisplayed.X;
		dragDropData.Y = dragDropDisplayed.Y;
	}

	private void OnKeyDown(KeyboardEventArgs e)
	{
		if (e.Key == "Delete")
		{
			DeleteSelectedElement();
		}
		if (e.Key == "r")
		{
			if (clickedDragDropDisplayed != null && clickedDragDropData != null)
			{
				clickedDragDropDisplayed.Rotate();
			}
		}
	}

	private void DeleteSelectedElement()
	{
		if (clickedConnectorData != null)
		{
			Connectors.Remove(clickedConnectorData);
			LayoutBuilder.RemoveConnection(clickedConnectorData.ConnectionOne.Parent.CycleComponent,
				clickedConnectorData.ConnectionTwo.Parent.CycleComponent,
				clickedConnectorData.ConnectionOne.PortIdentifier,
				clickedConnectorData.ConnectionTwo.PortIdentifier);

			clickedConnectorData = null;
			clickedConnectorDisplayed = null;
			Solver.Reset();
		}
		if (clickedDragDropData != null)
		{
			var connectedConnectors = Connectors.FindAll(c => c.ConnectionOne.Parent.Name == clickedDragDropData.Name);
			connectedConnectors = connectedConnectors.Concat(
				Connectors.FindAll(c => c.ConnectionTwo.Parent.Name == clickedDragDropData.Name)).ToList();
			foreach (var item in connectedConnectors)
			{
				Connectors.Remove(item);
				LayoutBuilder.RemoveConnection(item.ConnectionOne.Parent.CycleComponent,
				item.ConnectionTwo.Parent.CycleComponent,
				item.ConnectionOne.PortIdentifier,
				item.ConnectionTwo.PortIdentifier);
			}
			LayoutBuilder.RemoveComponent(clickedDragDropData.CycleComponent);
			DragDrops.Remove(clickedDragDropData);
			Solver.Reset();
		}
	}
}
